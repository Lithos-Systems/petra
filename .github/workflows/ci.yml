name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security audit

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Format and Lint
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Format check
      run: cargo fmt --all -- --check

    - name: Clippy
      run: cargo clippy --all-features -- -D warnings

  # Test matrix
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Test
      run: cargo test --all-features
      env:
        RUST_TEST_THREADS: 2

    - name: Test with minimal features
      run: cargo test --no-default-features

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      run: cargo audit

    - name: Check dependencies
      run: cargo tree --duplicate

  # Performance benchmarks
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --no-run

    - name: Run benchmarks and save results
      run: |
        cargo bench -- --output-format bencher | tee output.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks
        path: output.txt

    # Compare with base branch
    - name: Compare benchmarks
      if: github.event_name == 'pull_request'
      run: |
        echo "Benchmark comparison would go here"

  # Cross-compilation check
  cross:
    name: Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross

    - name: Check compilation
      run: cross check --target ${{ matrix.target }} --all-features

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Check documentation
      run: cargo doc --all-features --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"

    - name: Test documentation examples
      run: cargo test --doc --all-features

  # Integration tests with real services
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      mosquitto:
        image: eclipse-mosquitto:2
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: petra_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Run integration tests
      run: cargo test --test integration --features integration-tests
      env:
        MQTT_HOST: localhost
        MQTT_PORT: 1883
        DATABASE_URL: postgresql://postgres:postgres@localhost/petra_test

  # Coverage report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage
      run: cargo tarpaulin --out Xml --all-features

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
