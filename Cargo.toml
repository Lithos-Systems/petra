# ================================================================================
# PETRA - Industrial Automation System
# ================================================================================
#
# PURPOSE:
# This Cargo.toml file defines the project manifest for PETRA, a highly modular
# industrial automation system built in Rust. It manages over 80 feature flags
# organized into logical bundles for different deployment scenarios.
#
# INTERACTIONS:
# - Controls compilation features across all modules (src/lib.rs, src/engine.rs, etc.)
# - Validates feature dependencies at build time (build.rs)
# - Enables conditional compilation for platform-specific code
# - Supports deployment bundles (edge, scada, production, enterprise)
# - Defines dependency versions used throughout the codebase
# - Configures build profiles for development and release builds
#
# FEATURE ORGANIZATION:
# Features are hierarchically organized with clear dependencies and mutual exclusions
# to prevent configuration conflicts and ensure stable builds across platforms.
#
# CRITICAL NOTES:
# - Only one monitoring level can be active (standard-monitoring OR enhanced-monitoring)
# - Platform-specific features must be properly gated (e.g., realtime is Linux-only)
# - All feature dependencies must be explicitly declared to prevent build conflicts
# - Binary size and memory usage scales with enabled features (see bundle comments)
#
# ================================================================================

[package]
name = "petra"
version = "0.1.0"
edition = "2021"
authors = ["Lithos Systems"]
description = "Programmable Engine for Telemetry, Runtime, and Automation"
license = "AGPLv3"
repository = "https://github.com/lithos-systems/petra"
keywords = ["automation", "plc", "scada", "industrial", "iot"]
categories = ["embedded", "network-programming", "asynchronous"]
readme = "README.md"

# ================================================================================
# PERFORMANCE OPTIMIZATION PROFILES
# ================================================================================
# These settings optimize for different deployment scenarios:
# - Release: Maximum performance for production deployments
# - Dev: Fast compilation with debug capabilities
# - Bench: Optimized for benchmarking with debug symbols

[profile.release]
lto = true              # Link-time optimization for better performance
codegen-units = 1       # Single codegen unit for maximum optimization
panic = "abort"         # Smaller binaries, faster execution
opt-level = 3           # Maximum optimization level
strip = true            # Strip debug symbols from release builds

[profile.dev]
opt-level = 0           # Fast compilation for development
debug = true            # Full debug info for development
overflow-checks = true  # Runtime overflow checks in debug builds

# Optimize dependencies even in debug builds for better performance
# This significantly improves runtime performance during development
[profile.dev.package."*"]
opt-level = 2

# Benchmarking profile - optimized but with debug symbols
[profile.bench]
debug = true
lto = true

# ================================================================================
# CORE DEPENDENCIES
# ================================================================================
# Essential dependencies required for all builds
# These form the foundation of PETRA's functionality

[dependencies]
# === ASYNC RUNTIME ===
# Tokio provides the async runtime foundation for all concurrent operations
# Full feature set required for industrial automation scenarios
tokio = { 
    version = "1.40", 
    features = [
        "rt-multi-thread",   # Multi-threaded runtime for scalability
        "macros",            # Async macros (#[tokio::main], #[tokio::test])
        "sync",              # Synchronization primitives (Mutex, RwLock, channels)
        "time",              # Timer and timeout functionality
        "signal",            # Signal handling for graceful shutdown
        "process",           # Process spawning for external tools
        "fs",                # Async file system operations
        "io-util",           # Additional I/O utilities
        "net",               # Network functionality for protocols
        "parking_lot"        # High-performance locks (when optimized feature enabled)
    ]
}

# === SERIALIZATION ===
# Fast, zero-copy serialization for configuration and data exchange
# Used extensively in config.rs, value.rs, and protocol implementations
serde = { 
    version = "1.0", 
    features = ["derive"] 
}
serde_json = "1.0"       # JSON support for APIs and config
serde_yaml = "0.9"       # YAML support for human-readable configs
serde_with = { 
    version = "3.11", 
    optional = true 
}  # Extended serialization helpers

# === CORE UTILITIES ===
# Essential utilities used throughout the codebase
anyhow = "1.0"           # Error handling with context (used in main.rs)
thiserror = "1.0"        # Custom error types (used in error.rs)
log = "0.4"              # Logging facade (all modules)
env_logger = "0.11"      # Environment-based log configuration
chrono = { 
    version = "0.4", 
    features = ["serde"] 
}  # Date/time handling (timestamps)
uuid = { 
    version = "1.10", 
    features = ["v4", "serde"] 
}  # Unique identifiers
base64 = { 
    version = "0.22", 
    optional = true 
}  # Base64 encoding for security
once_cell = { 
    version = "1.20", 
    optional = true 
}  # Lazy static initialization
regex = { 
    version = "1.11", 
    optional = true 
}  # Regular expressions for validation

# === HIGH-PERFORMANCE COLLECTIONS ===
# Concurrent data structures for signal bus and shared state
dashmap = "6.1"          # Concurrent hash map for signal bus (signal.rs)
ringbuffer = { 
    version = "0.15", 
    optional = true 
}  # Lock-free ring buffer for monitoring

# === NETWORKING ===
# HTTP client/server and web framework dependencies
# Used by web interface, health endpoints, and REST APIs
reqwest = { 
    version = "0.12", 
    features = ["json"], 
    optional = true 
}
axum = { 
    version = "0.7", 
    optional = true 
}         # Web framework
tower = { 
    version = "0.5", 
    optional = true 
}        # Service middleware
tower-http = { 
    version = "0.6", 
    features = ["cors", "fs"], 
    optional = true 
}
hyper = { 
    version = "1.4", 
    optional = true 
}        # HTTP implementation
sysinfo = { 
    version = "0.32", 
    optional = true 
}     # System information for health

# === UTILITIES ===
# Additional utility dependencies
futures = { 
    version = "0.3", 
    default-features = false 
}  # Future utilities
rand = "0.8"             # Random number generation (used in testing/simulation)

# ================================================================================
# PROTOCOL DEPENDENCIES
# ================================================================================
# Industrial protocol implementations (all optional for modular builds)
# Each protocol is feature-gated to minimize binary size

# === MQTT ===
# MQTT client for IoT and edge device communication
# Lightweight protocol suitable for resource-constrained environments
rumqttc = { 
    version = "0.24", 
    optional = true 
}

# === INDUSTRIAL PROTOCOLS ===
# Support for major industrial automation protocols
# These are heavyweight dependencies, enable only as needed
rust-snap7 = { 
    version = "0.1", 
    optional = true 
}      # Siemens S7 PLC communication
tokio-modbus = { 
    version = "0.7", 
    default-features = false, 
    optional = true 
}  # Modbus TCP/RTU
opcua = { 
    version = "0.12", 
    default-features = false, 
    optional = true 
}        # OPC-UA server

# ================================================================================
# STORAGE DEPENDENCIES
# ================================================================================
# Data persistence and historical data management
# Supports multiple backends for different deployment scenarios

# === COLUMNAR STORAGE ===
# Apache Arrow and Parquet for high-performance time-series data
# Minimal features to reduce binary size
arrow = { 
    version = "55.1", 
    default-features = false, 
    optional = true 
}
arrow-array = { 
    version = "55.1", 
    default-features = false, 
    optional = true 
}
arrow-schema = { 
    version = "55.1", 
    default-features = false, 
    optional = true 
}
parquet = { 
    version = "55.2.0", 
    features = ["arrow"], 
    default-features = false, 
    optional = true 
}

# === DATABASE ENGINES ===
# Optional database backends for enterprise deployments
# Heavy dependencies - enable only when needed
clickhouse = { 
    version = "0.12", 
    default-features = false, 
    features = ["lz4"], 
    optional = true 
}
rocksdb = { 
    version = "0.23", 
    default-features = false, 
    optional = true 
}

# === CLOUD STORAGE ===
# AWS S3 and object store abstraction for cloud deployments
object_store = { 
    version = "0.7", 
    default-features = false, 
    optional = true 
}
aws-sdk-s3 = { 
    version = "0.31", 
    default-features = false, 
    optional = true 
}
aws-config = { 
    version = "0.56", 
    default-features = false, 
    optional = true 
}

# === COMPRESSION ===
# Data compression for storage efficiency
# Multiple algorithms for different speed/ratio tradeoffs
zstd = { 
    version = "0.12", 
    default-features = false, 
    optional = true 
}  # Best compression ratio
lz4 = { 
    version = "1.24", 
    default-features = false, 
    optional = true 
}   # Fastest compression

# ================================================================================
# SECURITY DEPENDENCIES
# ================================================================================
# Authentication, authorization, and cryptographic functionality
# Critical for production deployments

# === CRYPTOGRAPHY ===
sha2 = { 
    version = "0.10", 
    optional = true 
}                    # SHA-2 hashing
ring = { 
    version = "0.17", 
    default-features = false, 
    optional = true 
}  # Cryptographic operations
rustls = { 
    version = "0.23", 
    default-features = false, 
    optional = true 
}  # TLS implementation
rustls-pemfile = { 
    version = "2", 
    default-features = false, 
    optional = true 
}  # PEM file parsing

# === AUTHENTICATION ===
bcrypt = { 
    version = "0.15", 
    optional = true 
}                  # Password hashing
jsonwebtoken = { 
    version = "9.3", 
    optional = true 
}            # JWT token handling
ed25519-dalek = { 
    version = "2.1", 
    optional = true 
}           # Digital signatures

# ================================================================================
# MONITORING AND METRICS
# ================================================================================
# Performance monitoring and metrics collection
# Essential for production observability

# === METRICS ===
# Lightweight metrics collection and Prometheus integration
metrics = { 
    version = "0.23", 
    default-features = false, 
    optional = true 
}
metrics-exporter-prometheus = { 
    version = "0.15", 
    default-features = false, 
    optional = true 
}

# ================================================================================
# NOTIFICATION DEPENDENCIES
# ================================================================================
# Email and SMS notification services
# Used by alarm system for alerting

lettre = { 
    version = "0.11", 
    optional = true 
}                  # Email notifications

# ================================================================================
# VALIDATION DEPENDENCIES
# ================================================================================
# Data validation and schema enforcement
# Ensures data quality throughout the system

validator = { 
    version = "0.18", 
    optional = true 
}               # Input validation
jsonschema = { 
    version = "0.18", 
    default-features = false, 
    optional = true 
}  # JSON schema validation

# ================================================================================
# DEVELOPMENT DEPENDENCIES
# ================================================================================
# Tools for development, debugging, and profiling

csv = { 
    version = "1.3", 
    optional = true 
}                      # CSV file handling
schemars = { 
    version = "0.8", 
    default-features = false, 
    optional = true 
}  # JSON schema generation
notify = { 
    version = "6.1", 
    optional = true 
}                   # File system watching
pprof = { 
    version = "0.13", 
    features = ["flamegraph"], 
    optional = true 
}   # Performance profiling

# ================================================================================
# GUI DEPENDENCIES
# ================================================================================
# Optional graphical interface for configuration and monitoring

eframe = { 
    version = "0.30", 
    optional = true 
}                  # egui framework
egui = { 
    version = "0.30", 
    optional = true 
}                    # Immediate mode GUI
egui-phosphor = { 
    version = "0.5", 
    optional = true 
}            # Icon library
egui_plot = { 
    version = "0.30", 
    optional = true 
}               # Plotting widgets

# ================================================================================
# BUILD DEPENDENCIES
# ================================================================================
# Dependencies used during the build process

[build-dependencies]
chrono = "0.4"  # Used by build.rs for build timestamp generation

# ================================================================================
# DEVELOPMENT DEPENDENCIES
# ================================================================================
# Dependencies used only for testing and development

[dev-dependencies]
criterion = { 
    version = "0.5", 
    default-features = false 
}      # Benchmarking framework
proptest = "1.4"                                                # Property-based testing
tokio-test = "0.4"                                              # Tokio testing utilities
tempfile = "3.10"                                               # Temporary file creation
mockall = "0.12"                                                # Mock object generation

# ================================================================================
# FEATURE FLAGS
# ================================================================================
# Hierarchically organized feature flags for modular compilation
# Features are designed to prevent conflicts and provide clear upgrade paths
#
# IMPORTANT: Feature dependencies are transitive. When enabling a feature,
# all its dependencies are automatically enabled. Plan feature combinations
# carefully to avoid unintended dependencies.

[features]
# === DEFAULT FEATURES ===
# Minimal default for fast development builds
# Only includes basic monitoring - add features as needed
default = ["standard-monitoring"]

# ================================================================================
# DEPLOYMENT BUNDLES
# ================================================================================
# Pre-configured feature sets for common deployment scenarios
# Choose one bundle as your starting point, then add specific features as needed

# === EDGE BUNDLE ===
# Minimal footprint for IoT and edge devices
# Binary size: ~25MB, Memory: ~10MB runtime usage
# Use case: Data collection, basic processing, cloud connectivity
edge = [
    "mqtt",                    # MQTT protocol for IoT connectivity
    "basic-storage",          # Simple data logging
    "basic-security",         # Basic authentication
    "standard-monitoring"     # Essential monitoring
]

# === SCADA BUNDLE ===
# Industrial automation with full protocol support
# Binary size: ~65MB, Memory: ~30MB runtime usage
# Use case: Factory floor automation, PLC integration, HMI systems
scada = [
    "mqtt",                   # IoT connectivity
    "industrial",             # All industrial protocols
    "enterprise-storage",     # Advanced data persistence
    "enterprise-security",    # Full security features
    "enhanced-monitoring",    # Detailed performance monitoring
    "basic-alarms"           # Alarm management
]

# === PRODUCTION BUNDLE ===
# Optimized server deployment with reliability features
# Binary size: ~40MB, Memory: ~20MB runtime usage
# Use case: Cloud deployments, containerized environments
production = [
    "mqtt",                   # Basic connectivity
    "optimized",              # Performance optimizations
    "enterprise-storage",     # Reliable data persistence
    "enterprise-security",    # Security hardening
    "standard-monitoring",    # Performance monitoring
    "metrics",                # Prometheus integration
    "health"                  # Health check endpoints
]

# === ENTERPRISE BUNDLE ===
# Full-featured deployment with all capabilities
# Binary size: ~95MB, Memory: ~50MB runtime usage
# Use case: Large-scale deployments, multi-site operations
enterprise = [
    "mqtt",                   # Connectivity
    "industrial",             # All protocols
    "enterprise-storage",     # Full storage features
    "enterprise-security",    # Complete security
    "enhanced-monitoring",    # Advanced monitoring
    "metrics",                # Metrics collection
    "full-alarms",           # All notification methods
    "full-web",              # Web interface
    "full-types",            # Extended type system
    "full-validation"        # Comprehensive validation
]

# === DEVELOPMENT BUNDLE ===
# All features for testing and development
# Not for production use - includes debugging and profiling tools
development = [
    "edge",                   # Base functionality
    "dev-tools",              # Development utilities
    "profiling",              # Performance profiling
    "gui"                     # Visual configuration interface
]

# ================================================================================
# CORE FEATURES
# ================================================================================
# Fundamental system capabilities

# === PERFORMANCE ===
optimized = []                # Use parking_lot and optimized algorithms
realtime = []                 # Real-time OS scheduling (Linux only)
parallel-execution = []       # Execute blocks in parallel

# === CONNECTIVITY ===
mqtt = ["dep:rumqttc"]       # MQTT protocol support

# ================================================================================
# MONITORING FEATURES
# ================================================================================
# Mutually exclusive monitoring levels (choose one)
# WARNING: Only enable one monitoring level to avoid conflicts

# === MONITORING LEVELS ===
basic-monitoring = []                                    # Minimal monitoring
standard-monitoring = ["basic-monitoring"]              # Standard performance tracking
enhanced-monitoring = [                                  # Advanced monitoring with detailed stats
    "standard-monitoring", 
    "dep:ringbuffer"                                     # Lock-free data structures
]

# === METRICS INTEGRATION ===
metrics = [                                              # Prometheus metrics export
    "dep:metrics", 
    "dep:metrics-exporter-prometheus", 
    "dep:axum"
]

# ================================================================================
# PROTOCOL FEATURES
# ================================================================================
# Industrial and IoT protocol implementations

# === INDIVIDUAL PROTOCOLS ===
s7-support = ["dep:rust-snap7"]                         # Siemens S7 PLC communication
modbus-support = ["dep:tokio-modbus"]                   # Modbus TCP/RTU support
opcua-support = ["dep:opcua"]                           # OPC-UA server implementation

# === PROTOCOL BUNDLES ===
industrial = ["s7-support", "modbus-support", "opcua-support"]  # All industrial protocols
iot = ["mqtt"]                                          # IoT-focused protocols

# ================================================================================
# STORAGE FEATURES
# ================================================================================
# Data persistence and historical data management

# === STORAGE BACKENDS ===
history = [                                             # Parquet-based historical data
    "dep:parquet", 
    "dep:arrow", 
    "dep:arrow-array", 
    "dep:arrow-schema"
]
advanced-storage = [                                    # Enterprise storage backends
    "history", 
    "dep:clickhouse", 
    "dep:rocksdb",
    "dep:aws-sdk-s3", 
    "dep:aws-config", 
    "dep:object_store"
]

# === STORAGE FEATURES ===
compression = ["dep:zstd", "dep:lz4"]                  # Data compression
wal = []                                                # Write-Ahead Logging
clickhouse = ["dep:clickhouse"]                        # ClickHouse backend
s3 = ["dep:aws-sdk-s3", "dep:aws-config"]             # AWS S3 storage

# === STORAGE BUNDLES ===
basic-storage = ["history"]                            # Simple data logging
enterprise-storage = [                                 # Full storage capabilities
    "advanced-storage", 
    "compression", 
    "wal"
]

# === STANDALONE FEATURES ===
# For fine-grained control over dependencies
parquet = ["dep:parquet", "dep:arrow", "dep:arrow-array", "dep:arrow-schema"]
arrow = ["dep:arrow", "dep:arrow-array", "dep:arrow-schema"]

# ================================================================================
# SECURITY FEATURES
# ================================================================================
# Authentication, authorization, and cryptographic features

# === CORE SECURITY ===
security = ["dep:sha2", "dep:base64"]                  # Base security framework

# === AUTHENTICATION METHODS ===
basic-auth = ["security", "dep:bcrypt"]                # Username/password authentication
jwt-auth = ["security", "dep:jsonwebtoken"]            # JWT token authentication
rbac = ["security"]                                     # Role-based access control
audit = ["security"]                                    # Security audit logging
signing = ["security", "dep:ed25519-dalek"]           # Digital signature support

# === SECURITY BUNDLES ===
basic-security = ["security", "basic-auth"]            # Basic authentication
enterprise-security = [                                # Full security suite
    "basic-security", 
    "jwt-auth", 
    "rbac", 
    "audit", 
    "signing"
]

# ================================================================================
# TYPE SYSTEM FEATURES
# ================================================================================
# Extended data types and type system enhancements

# === TYPE EXTENSIONS ===
extended-types = ["dep:serde_with"]                    # Extended Value enum types
engineering-types = ["extended-types"]                 # Engineering units and conversions
quality-codes = ["extended-types"]                     # Data quality indicators
value-arithmetic = ["extended-types"]                  # Arithmetic operations on Values
unit-conversion = ["engineering-types"]                # Unit conversion support

# === TYPE BUNDLES ===
enhanced-types = [                                     # Enhanced type system
    "extended-types", 
    "engineering-types", 
    "quality-codes", 
    "value-arithmetic"
]
full-types = ["enhanced-types", "unit-conversion"]     # Complete type system

# ================================================================================
# VALIDATION FEATURES
# ================================================================================
# Input validation and data quality enforcement

# === VALIDATION METHODS ===
validation = [                                         # Base validation framework
    "dep:regex", 
    "dep:validator", 
    "dep:once_cell"
]
regex-validation = ["validation"]                      # Regular expression validation
schema-validation = ["validation", "dep:jsonschema"]   # JSON schema validation
composite-validation = ["validation"]                  # Composite validation rules
cross-field-validation = ["composite-validation"]     # Cross-field validation

# === VALIDATION BUNDLES ===
basic-validation = ["validation", "regex-validation"]
advanced-validation = [
    "basic-validation", 
    "schema-validation", 
    "composite-validation"
]
full-validation = ["advanced-validation", "cross-field-validation"]

# ================================================================================
# ALARM AND NOTIFICATION FEATURES
# ================================================================================
# Alarm management and notification services

# === ALARM SYSTEM ===
alarms = []                                            # Base alarm framework

# === NOTIFICATION METHODS ===
email = ["alarms", "dep:lettre"]                      # Email notifications
twilio = [                                             # SMS notifications via Twilio
    "alarms", 
    "web", 
    "dep:reqwest"                                      # HTTP API client
]

# === ALARM BUNDLES ===
basic-alarms = ["alarms", "email"]                    # Email-based alarms
full-alarms = ["basic-alarms", "twilio"]              # All notification methods

# ================================================================================
# WEB INTERFACE FEATURES
# ================================================================================
# HTTP server and web interface capabilities

# === WEB FRAMEWORK ===
web = [                                                # Base web server
    "dep:axum", 
    "dep:tower", 
    "dep:tower-http", 
    "dep:hyper", 
    "dep:reqwest"
]

# === HEALTH MONITORING ===
health = [                                             # Health check endpoints
    "dep:axum", 
    "dep:tower", 
    "dep:tower-http", 
    "dep:sysinfo"
]
detailed-health = ["health", "metrics"]               # Detailed health information
health-metrics = ["health", "metrics"]                # Health metrics integration
health-history = ["health", "history"]                # Historical health data
custom-endpoints = ["health"]                         # Custom health endpoints

# === WEB BUNDLES ===
basic-web = ["web", "health"]                         # Basic web interface
full-web = [                                          # Complete web features
    "basic-web", 
    "detailed-health", 
    "health-metrics", 
    "health-history"
]

# ================================================================================
# GUI FEATURES
# ================================================================================
# Optional graphical user interface

gui = [                                                # Visual configuration interface
    "dep:eframe", 
    "dep:egui", 
    "dep:egui-phosphor", 
    "dep:egui_plot"
]

# ================================================================================
# DEVELOPMENT FEATURES
# ================================================================================
# Development, debugging, and profiling tools

dev-tools = ["dep:csv", "dep:notify"]                 # Development utilities
profiling = ["dep:pprof"]                             # Performance profiling

# ================================================================================
# EXPERIMENTAL FEATURES
# ================================================================================
# Features in development or experimental status
# WARNING: These features may change or be removed in future versions

examples = []                                          # Example configurations
hot-swap = []                                          # Hot-swapping of configurations
async-blocks = []                                      # Asynchronous block execution
advanced-blocks = []                                   # Advanced block types
statistics = []                                        # Statistical analysis blocks
ml-blocks = []                                         # Machine learning blocks
error-recovery = []                                    # Automatic error recovery

# ================================================================================
# COMPATIBILITY FEATURES
# ================================================================================
# Legacy and compatibility features

pprof = []                                            # Compatibility alias for profiling

# ================================================================================
# BINARY TARGETS
# ================================================================================
# Specify the main binary entry point
# Additional binaries can be added in [[bin]] sections

[[bin]]
name = "petra"
path = "src/main.rs"

# ================================================================================
# END OF CONFIGURATION
# ================================================================================
