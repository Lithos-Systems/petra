[package]
name = "petra"
version = "0.1.0"
edition = "2021"
authors = ["Nathan Stone <nathan@lithos.systems>"]
description = "PETRA - Programmable Engine for Telemetry, Runtime, and Automation"
license = "AGPL-3.0-or-later"
repository = "https://github.com/lithos-systems/petra"
keywords = ["automation", "plc", "scada", "industrial", "iot"]
categories = ["embedded", "network-programming"]
build = "src/build.rs"

[dependencies]
# Core dependencies (always included)
tokio = { version = "1.40", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
chrono = { version = "0.4", features = ["serde"] }
futures = "0.3"
async-trait = "0.1"
uuid = { version = "1.11", features = ["v4", "serde"] }
anyhow = "1.0"
clap = { version = "4.5", features = ["derive", "env"] }
base64 = { version = "0.22", optional = true }

# Optional core dependencies
parking_lot = { version = "0.12", optional = true }
dashmap = { version = "6.1", optional = true }

# Protocol dependencies
rumqttc = { version = "0.24", optional = true }
tokio-util = { version = "0.7", optional = true }
rust-snap7 = { version = "1.0", optional = true }
tokio-modbus = { version = "0.15", optional = true }
tokio-serial = { version = "5.4.5", optional = true }
opcua = { version = "0.12", optional = true }

# Storage dependencies
parquet = { version = "54.0", optional = true, features = ["async", "arrow"] }
arrow = { version = "54.0", optional = true }
arrow-array = { version = "54.0", optional = true }
arrow-schema = { version = "54.0", optional = true }
clickhouse = { version = "0.13", optional = true }
aws-sdk-s3 = { version = "1.0", optional = true }
rocksdb = { version = "0.22", optional = true }
zstd = { version = "0.13", optional = true }
lz4 = { version = "1.28", optional = true }

# Security dependencies  
jsonwebtoken = { version = "9.3", optional = true }
bcrypt = { version = "0.16", optional = true }
sha2 = { version = "0.10", optional = true }
ed25519-dalek = { version = "2.1", optional = true }

# Validation dependencies
regex = { version = "1.11", optional = true }
validator = { version = "0.18", optional = true }
jsonschema = { version = "0.18", optional = true }
once_cell = { version = "1.20", optional = true }

# Web and health dependencies
axum = { version = "0.7", optional = true }
tower = { version = "0.5", optional = true }
tower-http = { version = "0.6", features = ["fs", "trace", "cors"], optional = true }
hyper = { version = "1.5", optional = true }
sysinfo = { version = "0.32", optional = true }

# Alarm dependencies
lettre = { version = "0.11", default-features = false, features = ["smtp-transport", "pool", "hostname", "builder", "tokio1-native-tls"], optional = true }
reqwest = { version = "0.12", features = ["json", "rustls-tls"] }

# Metrics dependencies
metrics = { version = "0.23", optional = true }
metrics-exporter-prometheus = { version = "0.15", optional = true }

# Development dependencies
notify = { version = "6.1", optional = true }
eframe = { version = "0.29", optional = true }
egui = { version = "0.29", optional = true }
egui-phosphor = { version = "0.7", optional = true }
egui_plot = { version = "0.29", optional = true }
pprof = { version = "0.14", features = ["flamegraph", "protobuf-codec"], optional = true }

# Type support dependencies  
serde_with = { version = "3.11", optional = true }

[build-dependencies]
# No build dependencies needed for the feature validation script

[features]
# Default features (minimal but functional)
default = ["standard-monitoring", "mqtt"]

# ============================================================================
# CORE FEATURES
# ============================================================================

# Monitoring levels (mutually exclusive - pick one)
standard-monitoring = []
enhanced-monitoring = ["standard-monitoring", "dashmap"]

# Performance optimizations
optimized = ["parking_lot", "dashmap"]

# Metrics and telemetry
metrics = ["dep:metrics", "dep:metrics-exporter-prometheus"]

# Real-time capabilities (Linux only)
realtime = []

# ============================================================================
# PROTOCOL FEATURES  
# ============================================================================

# MQTT protocol support
mqtt = ["rumqttc", "tokio-util"]
mqtt-persistence = ["mqtt"]
mqtt-statistics = ["mqtt", "metrics"]

# Industrial automation protocols
s7-support = ["rust-snap7"]
modbus-support = ["tokio-modbus", "tokio-serial"]
opcua-support = ["opcua"]

# Protocol feature groups
industrial = ["s7-support", "modbus-support", "opcua-support"]
iot = ["mqtt"]

# ============================================================================
# STORAGE FEATURES
# ============================================================================

# Basic storage (Parquet-based historical logging)
history = ["parquet", "arrow", "arrow-array", "arrow-schema"]

# Advanced enterprise storage backends
advanced-storage = ["history", "clickhouse", "aws-sdk-s3", "rocksdb"]
clickhouse = ["dep:clickhouse"]
s3 = ["aws-sdk-s3"]

# Data compression
compression = ["zstd", "lz4"]

# Write-Ahead Logging for durability
wal = ["rocksdb"]

# Storage feature groups
basic-storage = ["history"]
enterprise-storage = ["advanced-storage", "compression", "wal"]

# ============================================================================
# SECURITY FEATURES
# ============================================================================

# Base security framework
security = ["sha2", "base64"]

# Authentication methods
basic-auth = ["security", "bcrypt"]
jwt-auth = ["security", "jsonwebtoken"]

# Authorization
rbac = ["security"]

# Security audit logging  
audit = ["security"]

# Cryptographic signatures
signing = ["security", "ed25519-dalek"]

# Security feature groups
basic-security = ["security", "basic-auth"]
enterprise-security = ["basic-security", "jwt-auth", "rbac", "audit", "signing"]

# ============================================================================
# TYPE SYSTEM FEATURES
# ============================================================================

# Extended value types (String, Binary, Timestamp, Array, Object)
extended-types = ["serde_with"]

# Engineering value types with units
engineering-types = ["extended-types"]

# OPC-style quality codes
quality-codes = ["extended-types"]

# Arithmetic operations on values  
value-arithmetic = ["extended-types"]

# Unit conversion support
unit-conversion = ["engineering-types"]

# Type feature groups
enhanced-types = ["extended-types", "engineering-types", "quality-codes", "value-arithmetic"]
full-types = ["enhanced-types", "unit-conversion"]

# ============================================================================
# VALIDATION FEATURES
# ============================================================================

# Base validation framework
validation = ["regex", "validator", "once_cell"]

# Specific validation types
regex-validation = ["validation"]
schema-validation = ["validation", "jsonschema"]
composite-validation = ["validation"]
cross-field-validation = ["composite-validation"]

# Validation feature groups
basic-validation = ["validation", "regex-validation"]
advanced-validation = ["basic-validation", "schema-validation", "composite-validation"]
full-validation = ["advanced-validation", "cross-field-validation"]

# ============================================================================
# ALARM & NOTIFICATION FEATURES  
# ============================================================================

# Base alarm management
alarms = []

# Notification channels
email = ["alarms", "lettre"]
twilio = ["alarms", "web"]

# Alarm feature groups
basic-alarms = ["alarms", "email"] 
full-alarms = ["basic-alarms", "twilio"]

# ============================================================================
# WEB & HEALTH FEATURES
# ============================================================================

# Web interface support
web = ["axum", "tower", "tower-http", "hyper"]

# Health monitoring
health = ["axum", "tower", "tower-http", "sysinfo"]
detailed-health = ["health", "metrics"]
health-metrics = ["health", "metrics"]
health-history = ["health", "history"]
custom-endpoints = ["health"]

# Web feature groups
basic-web = ["web", "health"]
full-web = ["basic-web", "detailed-health", "health-metrics", "health-history"]

# ============================================================================
# DEVELOPMENT & TESTING FEATURES
# ============================================================================

# Development tools
examples = []
burn-in = ["examples"]
hot-swap = ["notify"]

# GUI support (for configuration and monitoring)
gui = ["eframe", "egui", "egui-phosphor", "egui_plot"]

# Profiling and debugging
profiling = []
pprof = ["dep:pprof", "profiling"]

# Schema generation
json-schema = ["jsonschema"]

# Development feature groups
dev-tools = ["examples", "hot-swap", "json-schema"]
full-dev = ["dev-tools", "gui", "profiling", "pprof", "burn-in"]

# ============================================================================
# BLOCK SYSTEM FEATURES
# ============================================================================

# Block categories
basic-blocks = []
advanced-blocks = ["basic-blocks"]
pid-control = ["advanced-blocks"]
statistics = ["advanced-blocks", "metrics"]
ml-blocks = ["advanced-blocks"]

# Enhanced error handling
enhanced-errors = []
error-recovery = ["enhanced-errors"]
circuit-breaker = ["enhanced-errors"]
rate-limiting = ["enhanced-errors"]

# ============================================================================
# FEATURE BUNDLES (for common use cases)
# ============================================================================

# Edge device (minimal footprint, IoT focused)
edge = [
    "mqtt",
    "standard-monitoring", 
    "compression",
    "basic-validation"
]

# SCADA system (industrial automation)
scada = [
    "industrial",           # s7-support + modbus-support + opcua-support
    "enhanced-monitoring",
    "enterprise-storage",   # advanced-storage + compression + wal
    "basic-security",       # security + basic-auth
    "basic-alarms",         # alarms + email
    "basic-web",           # web + health
]

# Production server (reliable, optimized)
production = [
    "optimized",
    "standard-monitoring",
    "metrics", 
    "basic-security",
    "wal",
    "history",
    "basic-web",
]

# Enterprise (full-featured production deployment)
enterprise = [
    "optimized",
    "enhanced-monitoring",
    "metrics",
    "enterprise-security",  # full security stack
    "enterprise-storage",   # full storage stack
    "mqtt",
    "full-alarms",         # all notification methods
    "full-web",            # all web features
    "enhanced-types",
    "full-validation",
]

# Development (all features for testing and development)
development = [
    "enhanced-monitoring",
    "optimized", 
    "metrics",
    "mqtt",
    "industrial",
    "enterprise-storage",
    "enterprise-security",
    "enhanced-types",
    "full-validation",
    "full-alarms",
    "full-web",
    "full-dev",
    "advanced-blocks",
    "pid-control",
    "statistics",
]

# Legacy compatibility bundles
enhanced-all = ["enhanced-monitoring", "optimized", "full-validation", "enhanced-errors"]
full = ["development"]  # Full compatibility with existing builds
dev = ["development", "full-dev"]

# Simplified bundle aliases
minimal = ["standard-monitoring", "mqtt"]
basic = ["edge"]
standard = ["production"] 
advanced = ["enterprise"]
all = ["development"]

# ============================================================================
# BINARY CONFIGURATIONS
# ============================================================================

[[bin]]
name = "petra"
path = "src/main.rs"

[[bin]]
name = "s7_test"
path = "src/bin/s7_test.rs"
required-features = ["s7-support"]

[[bin]]
name = "mqtt_publisher"
path = "src/bin/mqtt_publisher.rs"
required-features = ["examples", "mqtt"]

[[bin]]
name = "petra_dashboard"
path = "src/bin/dashboard.rs"
required-features = ["gui", "history"]

[[bin]]
name = "parquet_viewer"
path = "src/bin/parquet_viewer.rs"
required-features = ["history"]

[[bin]]
name = "storage_test"
path = "src/bin/storage_test.rs"
required-features = ["history", "advanced-storage"]

[[bin]]
name = "twilio_test"
path = "src/bin/twilio_test.rs"
required-features = ["twilio"]

[[bin]]
name = "simple_s7_test"
path = "src/bin/simple_s7_test.rs"
required-features = ["s7-support"]

[[bin]]
name = "generate_schema"
path = "src/bin/generate_schema.rs"
required-features = ["json-schema"]

# ============================================================================
# OPTIMIZATION PROFILES
# ============================================================================

[profile.release]
lto = "thin"
codegen-units = 4
panic = "abort"
strip = true
opt-level = 3

[profile.release-with-debug]
inherits = "release"
debug = true
strip = false

[profile.bench]
debug = true

# Edge-optimized profile (smallest binary size)
[profile.edge]
inherits = "release"
opt-level = "z"
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true

# ============================================================================
# PACKAGE METADATA
# ============================================================================

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Feature documentation
[package.metadata.docs.rs.features]
edge = ["Edge device configuration"]
scada = ["SCADA system configuration"] 
production = ["Production server configuration"]
enterprise = ["Enterprise configuration with all features"]
development = ["Development configuration with all features"]
