[package]
name = "petra"
version = "0.1.0"
edition = "2021"
authors = ["Your Name <your.email@example.com>"]
description = "PETRA - Programmable Engine for Telemetry, Runtime, and Automation"
license = "AGPL-3.0-or-later"
repository = "https://github.com/yourusername/petra"
keywords = ["automation", "plc", "scada", "industrial", "iot"]
categories = ["embedded", "network-programming"]

[dependencies]
# Core dependencies
tokio = { version = "1.40", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
chrono = { version = "0.4", features = ["serde"] }
futures = "0.3"
async-trait = "0.1"
parking_lot = { version = "0.12", optional = true }
uuid = { version = "1.11", features = ["v4", "serde"] }
anyhow = "1.0"
clap = { version = "4.5", features = ["derive", "env"] }

# Security
base64 = "0.22"

# Optional dependencies
# Storage & Compression
parquet = { version = "54.0", optional = true, features = ["async", "arrow"] }
arrow = { version = "54.0", optional = true }
arrow-array = { version = "54.0", optional = true }
arrow-schema = { version = "54.0", optional = true }
zstd = { version = "0.13", optional = true }
lz4 = { version = "1.28", optional = true }

# Communication protocols
rust-snap7 = { version = "1.0", optional = true }
tokio-modbus = { version = "0.15", optional = true }
opcua = { version = "0.13", optional = true }
rumqttc = { version = "0.24", optional = true }
paho-mqtt = { version = "0.12", optional = true }

# Database
sqlx = { version = "0.8", features = ["runtime-tokio", "postgres", "chrono", "uuid"], optional = true }
clickhouse = { version = "0.13", optional = true }
redis = { version = "0.27", features = ["tokio-comp"], optional = true }

# Web & Networking
axum = { version = "0.7", optional = true }
tower = { version = "0.5", optional = true }
tower-http = { version = "0.6", features = ["fs", "trace", "cors"], optional = true }
hyper = { version = "1.5", optional = true }
reqwest = { version = "0.12", features = ["json"], optional = true }
lettre = { version = "0.11", features = ["tokio1", "smtp-transport"], optional = true }

# Monitoring & Metrics
metrics = { version = "0.24", optional = true }
metrics-exporter-prometheus = { version = "0.16", optional = true }

# Authentication & Security
jsonwebtoken = { version = "9.3", optional = true }
argon2 = { version = "0.5", optional = true }
sha2 = { version = "0.10", optional = true }
hmac = { version = "0.12", optional = true }

# Validation
regex = { version = "1.11", optional = true }
validator = { version = "0.19", optional = true }
once_cell = { version = "1.20", optional = true }
jsonschema = { version = "0.26", optional = true }

# System & Realtime
libc = { version = "0.2", optional = true }
nix = { version = "0.29", features = ["process", "sched"], optional = true }
sysinfo = { version = "0.32", optional = true }

# GUI
eframe = { version = "0.29", optional = true }
egui = { version = "0.29", optional = true }
egui-phosphor = { version = "0.7", optional = true }
egui_plot = { version = "0.29", optional = true }

# S3 Support
aws-config = { version = "1.5", optional = true }
aws-sdk-s3 = { version = "1.64", optional = true }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.14"
pretty_assertions = "1.4"

[features]
default = ["standard-monitoring = []
enhanced-monitoring = []
optimized = ["parking_lot"]

# Storage features
advanced-storage = ["compression", "wal"]
compression = ["zstd", "lz4"]
wal = []
clickhouse = ["dep:clickhouse", "web"]
s3 = ["aws-config", "aws-sdk-s3"]

# Communication protocols
s7-support = ["rust-snap7"]
modbus-support = ["tokio-modbus"]
opcua-support = ["opcua"]
mqtt = ["rumqttc"]
mqtt-persistence = ["mqtt"]
mqtt-statistics = ["mqtt"]

# Web features
web = ["axum", "tower", "hyper", "reqwest"]
metrics = ["dep:metrics", "metrics-exporter-prometheus"]
web-api = ["web"]

# Security features
security = ["sha2", "hmac"]
basic-auth = ["security"]
jwt-auth = ["security", "jsonwebtoken"]
rbac = ["security"]
audit = ["security"]
audit-db = ["audit", "sqlx"]
audit-file = ["audit"]

# Additional features
json-schema = ["dep:jsonschema"]
validation = ["regex", "validator", "once_cell"]
alarms = ["lettre"]
realtime = ["libc", "nix", "sysinfo"]
health = ["axum", "tower", "tower-http", "sysinfo"]
profiling = []

# GUI features
gui = ["eframe", "egui", "egui-phosphor", "egui_plot"]

# Development features
examples = []

# Feature bundles
enhanced-all = ["enhanced-monitoring", "optimized", "validation", "enhanced-errors"]
full = ["enhanced-all", "advanced-storage", "compression", "wal", "metrics", "web", "security", "json-schema", "history", "alarms", "health", "mqtt", "s7-support", "detailed-health", "health-metrics", "mqtt-persistence", "mqtt-statistics"]
dev = ["full", "gui", "examples", "profiling"]

# Production configurations (simplified)
production = ["optimized", "standard-monitoring", "metrics", "security", "wal"]
production-full = ["production", "advanced-storage", "compression", "mqtt", "history"]
edge = ["mqtt", "standard-monitoring", "compression"]
scada = ["s7-support", "modbus-support", "opcua-support", "production"]

# Validation features
basic-validation = ["validation"]
regex-validation = ["validation", "regex", "once_cell"]
schema-validation = ["validation", "jsonschema"]
custom-validation = ["validation"]
composite-validation = ["validation"]
cross-field-validation = ["composite-validation"]
validation-presets = ["validation"]
validation-warnings = ["validation"]
stateful-validation = ["validation"]
async-validation = ["validation"]

# Security features
basic-auth = ["security"]
jwt-auth = ["security", "jsonwebtoken"]
rbac = ["security"]
audit = ["security"]
audit-db = ["audit"]
audit-file = ["audit"]

# Health features
detailed-health = ["health"]
health-metrics = ["health", "sysinfo"]
health-history = ["health"]
custom-endpoints = ["health"]

# Realtime features
memory-locking = ["realtime"]
cgroups = ["realtime"]
realtime-monitor = ["realtime", "parking_lot"]
deadline-monitor = ["realtime"]

# Block features
async-blocks = []
circuit-breaker = ["parking_lot"]
block-metadata = []
advanced-blocks = []
pid-limits = ["advanced-blocks"]
pid-antiwindup = ["advanced-blocks"]
statistics = []
ml-blocks = []
email = ["lettre"]
twilio = ["web"]
rate-limiting = []

# Error features
enhanced-errors = []
error-recovery = []

# Signal features
enhanced = ["enhanced-monitoring"]
history = ["parquet", "arrow", "arrow-array", "arrow-schema"]

# Value features
extended-types = []
engineering-types = []
quality-codes = []
value-arithmetic = []
unit-conversion = []

# Binary configurations
[[bin]]
name = "petra"
path = "src/main.rs"

[[bin]]
name = "s7_test"
path = "src/bin/s7_test.rs"
required-features = ["s7-support"]

[[bin]]
name = "mqtt_publisher"
path = "src/bin/mqtt_publisher.rs"
required-features = ["examples", "mqtt"]

[[bin]]
name = "petra_dashboard"
path = "src/bin/dashboard.rs"
required-features = ["gui", "history"]

[[bin]]
name = "parquet_viewer"
path = "src/bin/parquet_viewer.rs"
required-features = ["history"]

[[bin]]
name = "storage_test"
path = "src/bin/storage_test.rs"
required-features = ["history", "advanced-storage"]

[[bin]]
name = "twilio_test"
path = "src/bin/twilio_test.rs"
required-features = ["web"]

[[bin]]
name = "simple_s7_test"
path = "src/bin/simple_s7_test.rs"
required-features = ["s7-support"]

[[bin]]
name = "generate_schema"
path = "src/bin/generate_schema.rs"
required-features = ["json-schema"]

# Optimization profiles
[profile.release]
lto = "thin"
codegen-units = 4
panic = "abort"
strip = true
opt-level = 3

[profile.release-with-debug]
inherits = "release"
debug = true
strip = false

[profile.bench]
debug = true

# Package metadata
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]", "basic-features"]

# Core feature sets
basic-features = ["validation", "metrics"]
standard-monitoring
