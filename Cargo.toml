[package]
name = "petra"
version = "2.1.0"
edition = "2021"
license = "AGPL-3.0-or-later"
description = "Programmable Engine for Telemetry, Runtime, and Automation"
authors = ["Nathan Stone <nathan@lithos.systems>"]
repository = "https://github.com/lithos-systems/petra"
keywords = ["automation", "plc", "scada", "industrial", "iot"]
categories = ["embedded", "network-programming", "automation"]

[dependencies]
# Core runtime - minimal features only
tokio = { version = "1.40", features = ["rt-multi-thread", "time", "signal", "macros", "sync"] }
serde = { version = "1.0", features = ["derive"] }
serde_yaml = "0.9"
serde_json = "1.0"
toml = "0.8"

# Essential concurrency
dashmap = "6.0"
crossbeam = "0.8"
parking_lot = "0.12"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging - minimal
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"], default-features = false }

# MQTT - production ready
rumqttc = { version = "0.24", default-features = false, features = ["use-rustls"] }

# CLI
clap = { version = "4.5", features = ["std", "derive", "env"] }

# Time handling
chrono = { version = "0.4.38", features = ["serde"], default-features = false }

# Core utilities
bytes = "1.5"
ringbuffer = { version = "0.15", optional = true }
async-trait = "0.1"
regex = { version = "1.10", optional = true }
base64 = { version = "0.22", optional = true }
htmlescape = "0.3"
md5 = "0.7"
once_cell = { version = "1.19", optional = true }
serde_with = { version = "3.8", optional = true }

# S7 communication (only if needed)
rust-snap7 = { version = "1.142.2", optional = true }

# HTTP/Web - minimal features
axum = { version = "0.7", features = ["tokio"], default-features = false, optional = true }
tower = { version = "0.4", features = ["tokio"], default-features = false, optional = true }
tower-http = { version = "0.5", features = ["cors"], default-features = false, optional = true }
hyper = { version = "1.3", optional = true }
reqwest = { version = "0.11", features = ["json", "rustls-tls"], default-features = false, optional = true }

# No separate twilio dependency - uses reqwest for HTTP API calls

# Health monitoring
sysinfo = { version = "0.31", optional = true }

# Utilities
futures = { version = "0.3", default-features = false }

# Metrics - lightweight
metrics = { version = "0.23", default-features = false, optional = true }
metrics-exporter-prometheus = { version = "0.15", default-features = false, optional = true }

# Storage - all optional for production flexibility
arrow = { version = "55.1", default-features = false, optional = true }
arrow-array = { version = "55.1", default-features = false, optional = true }
arrow-schema = { version = "55.1", default-features = false, optional = true }
parquet = { version = "55.1", default-features = false, optional = true }
rocksdb = { version = "0.21", default-features = false, optional = true }
clickhouse = { version = "0.12", default-features = false, features = ["lz4"], optional = true }

# Cloud storage (optional)
object_store = { version = "0.7", default-features = false, optional = true }
aws-sdk-s3 = { version = "0.31", default-features = false, optional = true }
aws-config = { version = "0.56", default-features = false, optional = true }

# Compression (optional)
zstd = { version = "0.12", default-features = false, optional = true }
lz4 = { version = "1.24", default-features = false, optional = true }

# Security (optional)
sha2 = { version = "0.10", optional = true }
ring = { version = "0.17", default-features = false, optional = true }
rustls = { version = "0.23", default-features = false, optional = true }
rustls-pemfile = { version = "2", default-features = false, optional = true }
bcrypt = { version = "0.15", optional = true }
jsonwebtoken = { version = "9.3", optional = true }
ed25519-dalek = { version = "2.1", optional = true }

# Protocol support (optional)
opcua = { version = "0.12", default-features = false, optional = true }
tokio-modbus = { version = "0.7", default-features = false, optional = true }

# System monitoring
sysinfo = { version = "0.31", optional = true }

# Notifications
lettre = { version = "0.11", optional = true }

# Validation
validator = { version = "0.18", optional = true }

# Development/debugging (optional)
csv = { version = "1.3", optional = true }
schemars = { version = "0.8", default-features = false, optional = true }
jsonschema = { version = "0.18", default-features = false, optional = true }
notify = { version = "6.1", optional = true }
pprof = { version = "0.13", features = ["flamegraph"], optional = true }

# GUI dependencies (optional, for dashboard)
eframe = { version = "0.30", optional = true }
egui = { version = "0.30", optional = true }
egui-phosphor = { version = "0.5", optional = true }
egui_plot = { version = "0.30", optional = true }

# Utilities
rand = { version = "0.8", optional = true }

[build-dependencies]
chrono = "0.4"

[dev-dependencies]
criterion = { version = "0.5", default-features = false }
proptest = "1.4"
tokio-test = "0.4"
tempfile = "3.10"
mockall = "0.12"

[features]
# Minimal default for fast builds
default = ["standard-monitoring"]

# Bundle features
edge = ["mqtt", "basic-storage", "basic-security", "standard-monitoring"]
scada = ["mqtt", "industrial", "enterprise-storage", "enterprise-security", "enhanced-monitoring", "basic-alarms"]
production = ["mqtt", "optimized", "enterprise-storage", "enterprise-security", "standard-monitoring", "metrics", "health"]
enterprise = ["mqtt", "industrial", "enterprise-storage", "enterprise-security", "enhanced-monitoring", "metrics", "full-alarms", "full-web", "full-types", "full-validation"]
development = ["edge", "dev-tools", "profiling"]

# Core features
mqtt = []
optimized = []

# Missing realtime feature referenced in src/engine.rs  
realtime = []

# Monitoring levels (mutually exclusive conceptually)
basic-monitoring = []
standard-monitoring = ["basic-monitoring"]
enhanced-monitoring = ["standard-monitoring", "dep:ringbuffer"]

# Metrics
metrics = ["dep:metrics", "dep:metrics-exporter-prometheus"]

# Protocol features
s7-support = ["dep:rust-snap7"]
modbus-support = ["dep:tokio-modbus"]
opcua-support = ["dep:opcua"]
industrial = ["s7-support", "modbus-support", "opcua-support"]
iot = ["mqtt"]

# Storage features
history = ["dep:parquet", "dep:arrow", "dep:arrow-array", "dep:arrow-schema"]
advanced-storage = ["history", "dep:clickhouse", "dep:aws-sdk-s3", "dep:aws-config", "dep:rocksdb"]
clickhouse = ["dep:clickhouse"]
s3 = ["dep:aws-sdk-s3"]
compression = ["dep:zstd", "dep:lz4"]
wal = ["dep:rocksdb"]
basic-storage = ["history"]
enterprise-storage = ["advanced-storage", "compression", "wal"]

# Missing standalone storage features (if not already present)
parquet = ["dep:parquet", "dep:arrow", "dep:arrow-array", "dep:arrow-schema"]
arrow = ["dep:arrow", "dep:arrow-array", "dep:arrow-schema"]

# Security features
security = ["dep:sha2", "dep:base64"]
basic-auth = ["security", "dep:bcrypt"]
jwt-auth = ["security", "dep:jsonwebtoken"]
rbac = ["security"]
audit = ["security"]
signing = ["security", "dep:ed25519-dalek"]
basic-security = ["security", "basic-auth"]
enterprise-security = ["basic-security", "jwt-auth", "rbac", "audit", "signing"]

# Type features
extended-types = ["dep:serde_with"]
engineering-types = ["extended-types"]
quality-codes = ["extended-types"]
value-arithmetic = ["extended-types"]
unit-conversion = ["engineering-types"]
enhanced-types = ["extended-types", "engineering-types", "quality-codes", "value-arithmetic"]
full-types = ["enhanced-types", "unit-conversion"]

# Validation features
validation = ["dep:regex", "dep:validator", "dep:once_cell"]
regex-validation = ["validation"]
schema-validation = ["validation", "dep:jsonschema"]
composite-validation = ["validation"]
cross-field-validation = ["composite-validation"]
basic-validation = ["validation", "regex-validation"]
advanced-validation = ["basic-validation", "schema-validation", "composite-validation"]
full-validation = ["advanced-validation", "cross-field-validation"]

# Alarm features
alarms = []
email = ["alarms", "dep:lettre"]
twilio = ["alarms", "web", "dep:reqwest"]  # Twilio uses reqwest for HTTP API calls
basic-alarms = ["alarms", "email"]
full-alarms = ["basic-alarms", "twilio"]

# Web features
web = ["dep:axum", "dep:tower", "dep:tower-http", "dep:hyper", "dep:reqwest"]
health = ["dep:axum", "dep:tower", "dep:tower-http", "dep:sysinfo"]
detailed-health = ["health", "metrics"]
health-metrics = ["health", "metrics"]
health-history = ["health", "history"]
custom-endpoints = ["health"]
basic-web = ["web", "health"]
full-web = ["basic-web", "detailed-health", "health-metrics", "health-history"]

# GUI features
gui = ["dep:eframe", "dep:egui", "dep:egui-phosphor", "dep:egui_plot"]

# Development features
dev-tools = ["dep:csv", "dep:notify"]
profiling = ["dep:pprof"]

# === MISSING FEATURES THAT WERE CAUSING COMPILATION ERRORS ===

# Missing MQTT features that are referenced in src/mqtt.rs
mqtt-persistence = []
mqtt-tls = ["dep:rustls", "dep:rustls-pemfile"] 
mqtt-5 = []
mqtt-bridge = []

# Missing circuit breaker feature referenced in src/blocks/mod.rs
circuit-breaker = []

# Missing enhanced error feature referenced in src/config.rs
enhanced-errors = []

# Missing edge detection feature referenced in src/blocks/mod.rs  
edge-detection = []

# Missing memory blocks feature referenced in src/blocks/mod.rs
memory-blocks = []

# Missing PID control feature referenced in src/blocks/mod.rs
pid-control = []

# Missing communication feature referenced in src/blocks/mod.rs
communication = []

# Missing state machine feature referenced in src/blocks/mod.rs
state-machine = []

# Missing advanced math feature referenced in src/blocks/mod.rs
advanced-math = []

# Missing ML feature referenced in src/blocks/mod.rs
ml = []

# Missing JSON schema feature referenced in src/blocks/mod.rs
json-schema = ["dep:schemars"]

# Missing scripting feature referenced in src/mqtt.rs
scripting = []

# Missing burn-in feature referenced in src/config_manager.rs
burn-in = []

[[bin]]
name = "petra"
path = "src/main.rs"

[[bin]]
name = "storage_test"
path = "src/bin/storage_test.rs"
required-features = ["history"]

[[bin]]
name = "parquet_viewer"
path = "src/bin/parquet_viewer.rs"
required-features = ["parquet"]

[[bin]]
name = "mqtt_publisher"
path = "src/bin/mqtt_publisher.rs"
required-features = ["mqtt"]

[[bin]]
name = "generate_schema"
path = "src/bin/generate_schema.rs"
required-features = ["json-schema"]

[[bin]]
name = "petra_dashboard"
path = "src/bin/petra_dashboard.rs"
required-features = ["gui"]

[[bin]]
name = "twilio_test"
path = "src/bin/twilio_test.rs"
required-features = ["twilio"]

[profile.release]rror: failed to parse manifest at `/home/nathan/Documents/GitHub/petra/Cargo.toml`

Caused by:rror: failed to parse manifest at `/home/nathan/Documents/GitHub/petra/Cargo.toml`

Caused by:
  optional dependency `twilio` is not included in any feature
  Make sure that `dep:twilio` is included in one of features in the [features] table.
  optional dependency `twilio` is not included in any feature
  Make sure that `dep:twilio` is included in one of features in the [features] table.
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.release-small]
inherits = "release"
opt-level = "z"
strip = true

[profile.dev]
opt-level = 0
debug = true
overflow-checks = true
