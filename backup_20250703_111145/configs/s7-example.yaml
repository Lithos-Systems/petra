# Example Petra configuration with S7 PLC integration
signals:
  # Motor control signals (from HMI/SCADA)
  - name: "motor_start_cmd"
    type: "bool"
    initial: false

  - name: "motor_stop_cmd"
    type: "bool"
    initial: false

  # Motor status signals (from PLC)
  - name: "motor_running"
    type: "bool"
    initial: false

  - name: "motor_fault"
    type: "bool"
    initial: false

  - name: "motor_current"
    type: "float"
    initial: 0.0

  - name: "motor_speed_setpoint"
    type: "int"
    initial: 0

  - name: "motor_actual_speed"
    type: "int"
    initial: 0

  # Tank level monitoring
  - name: "tank_level"
    type: "float"
    initial: 0.0

  - name: "tank_high_alarm"
    type: "bool"
    initial: false

  - name: "tank_low_alarm"
    type: "bool"
    initial: false

  # Internal logic signals
  - name: "system_ready"
    type: "bool"
    initial: true

  - name: "motor_enable"
    type: "bool"
    initial: false

  - name: "any_alarm"
    type: "bool"
    initial: false

blocks:
  # Simple interlock logic
  - name: "motor_interlock"
    type: "AND"
    inputs:
      in1: "system_ready"
      in2: "motor_start_cmd"
    outputs:
      out: "motor_enable"

  - name: "alarm_monitor"
    type: "OR"
    inputs:
      in1: "tank_high_alarm"
      in2: "tank_low_alarm"
    outputs:
      out: "any_alarm"

scan_time_ms: 100

mqtt:
  broker_host: "mqtt.lithos.systems"
  broker_port: 1883
  client_id: "petra-s7-bridge"
  topic_prefix: "petra/plc"
  qos: 1
  publish_on_change: true

s7:
  ip: "192.168.1.100"
  rack: 0
  slot: 2
  connection_type: "PG"
  poll_interval_ms: 100
  timeout_ms: 5000
  mappings:
    # Read motor status from PLC
    - signal: "motor_running"
      area: "DB"
      db_number: 100
      address: 0
      data_type: "bool"
      bit: 0
      direction: "read"

    - signal: "motor_fault"
      area: "DB"
      db_number: 100
      address: 0
      data_type: "bool"
      bit: 1
      direction: "read"

    - signal: "motor_current"
      area: "DB"
      db_number: 100
      address: 4
      data_type: "real"
      direction: "read"

    - signal: "motor_actual_speed"
      area: "DB"
      db_number: 100
      address: 8
      data_type: "int"
      direction: "read"

    # Write motor commands to PLC
    - signal: "motor_enable"
      area: "DB"
      db_number: 101
      address: 0
      data_type: "bool"
      bit: 0
      direction: "write"

    - signal: "motor_stop_cmd"
      area: "DB"
      db_number: 101
      address: 0
      data_type: "bool"
      bit: 1
      direction: "write"

    - signal: "motor_speed_setpoint"
      area: "DB"
      db_number: 101
      address: 2
      data_type: "int"
      direction: "write"

    # Read tank level from analog input
    - signal: "tank_level"
      area: "DB"
      db_number: 102
      address: 0
      data_type: "real"
      direction: "read"

    # Read alarm states from marker memory
    - signal: "tank_high_alarm"
      area: "M"
      address: 10
      data_type: "bool"
      bit: 0
      direction: "read"

    - signal: "tank_low_alarm"
      area: "M"
      address: 10
      data_type: "bool"
      bit: 1
      direction: "read"

    # System ready from input
    - signal: "system_ready"
      area: "I"
      address: 0
      data_type: "bool"
      bit: 0
      direction: "read"
